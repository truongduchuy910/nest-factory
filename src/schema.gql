# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @extends on INTERFACE | OBJECT

directive @external on FIELD_DEFINITION | OBJECT

directive @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

directive @key(fields: String!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT

directive @link(import: [link__Import], url: String!) on SCHEMA

directive @override(from: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

directive @shareable on FIELD_DEFINITION | OBJECT

directive @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

input CursorInput {
  """
  This is the cursor that points to the start of the page of data that has been returned.
  """
  after: String

  """
  This is the cursor that points to the end of the page of data that has been returned.
  """
  before: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ManyMongoEntity {
  """data return as array"""
  data: [MongoEntity!]!

  """pagination"""
  paging: PagingEntity
}

"""Type of neo entity list response"""
type ManyNeo {
  data: [NeoEntity!]!
  paging: PagingEntity
}

type ManyPrisEntity {
  """data return as array"""
  data: [PrisEntity!]!

  """pagination"""
  paging: PagingEntity
}

"""Mongo create Public InputType."""
input MongoCreateInputType {
  date: DateTime
  id: ID
  label: String
  number: Float
  string: String
}

type MongoEntity {
  date: DateTime
  id: ID!
  label: String
  number: Float
  string: String
}

"""Mongo index Public InputType"""
input MongoIndexInputType {
  id: ID
}

"""Mongo create Public InputType."""
input MongoUpdateInputType {
  date: DateTime
  id: ID
  label: String
  number: Float
  string: String
}

"""Mongo where Public InputType"""
input MongoWhereInputType {
  date: DateTime
  id: ID
  label: String
  number: Float
  string: String
}

type Mutation {
  createManyMongo(data: [MongoCreateInputType!]!): MongoEntity
  createOneMongo(data: MongoCreateInputType!): MongoEntity

  """create one neo"""
  createOneNeo(data: NeoCreateInputType!): NeoEntity

  """create one pris"""
  createOnePris(data: PrisCreateInputType!): PrisEntity
  deleteManyMongo(paging: PagingInput, search: String, sortBy: String, where: MongoWhereInputType): Float
  deleteOneMongo(index: MongoIndexInputType!, label: String): MongoEntity
  deleteOneNeo(index: NeoIndexInputType!): NeoEntity

  """delete one pris"""
  deleteOnePris(index: PrisIndexInputType!, label: String): PrisEntity
  updateOneMongo(data: MongoUpdateInputType!, index: MongoIndexInputType!): MongoEntity
  updateOneNeo(data: NeoUpdateInputType!, index: NeoIndexInputType!): NeoEntity
}

"""neo entity create input"""
input NeoCreateInputType {
  createdAt: DateTime = "2024-09-14T09:31:41.845Z"
  createdBy: String
  date: DateTime
  number: Float
  string: String
}

"""Type of neo entity. Base on neo interface."""
type NeoEntity {
  createdAt: DateTime
  createdBy: String
  date: DateTime
  id: ID
  number: Float
  string: String
}

"""neo entity index input"""
input NeoIndexInputType {
  id: ID
}

"""neo entity update input"""
input NeoUpdateInputType {
  date: DateTime
  number: Float
  string: String
}

"""neo entity where input"""
input NeoWhereInputType {
  id: ID
}

type PageNumberEntity {
  """Is paging of current data results?"""
  current: Boolean

  """Page index number."""
  index: Int

  """Paging limit variable."""
  limit: Int

  """Is Addtional pagination node? Sush as `...` label."""
  more: Boolean

  """Paging offset variable."""
  offset: Int
}

type PagingEntity {
  """Total results match with `WhereInput` in arguments."""
  count: Int

  """Index `from` of results."""
  from: Int

  """Total results return."""
  length: Int

  """
  Cursor-based pagination. The Graph API endpoint that will return the next page of data. If not included, this is the last page of data. Due to how pagination works with visibility and privacy, it is possible that a page may be empty but contain a next paging link. Stop paging when the next link no longer appears.
  """
  next: PagingNextEntity

  """
  Offset-based Pagination using with API have suffix `WithPage`. This is current items show in pagination component.
  """
  pages: [PageNumberEntity!]

  """
  Cursor-based pagination. The Graph API endpoint that will return the previous page of data. If not included, this is the first page of data.
  """
  previous: PagingPreviousEntity

  """Index `to` of results."""
  to: Int
}

input PagingInput {
  cursors: CursorInput

  """
  This is the maximum number of objects that may be returned. A query may return fewer than the value of limit due to filtering. Do not depend on the number of results being fewer than the limit value to indicate that your query reached the end of the list of data, use the absence of next instead as described below. For example, if you set limit to 10 and 9 results are returned, there may be more data available, but one item was removed due to privacy filtering. Some edges may also have a maximum on the limit value for performance reasons. In all cases, the API returns the correct pagination links.
  """
  limit: Float

  """This offsets the start of each page by the number specified."""
  offset: Float

  """
  A Unix timestamp or strtotime data value that points to the start of the range of time-based data.
  """
  since: DateTime

  """Using to build pagination map. This is total results return per page."""
  size: Int = 10

  """
  A Unix timestamp or strtotime data value that points to the end of the range of time-based data.
  """
  until: DateTime
}

type PagingNextEntity {
  after: String
  count: Float
}

type PagingPreviousEntity {
  before: String
  count: Float
}

"""Pris create Public InputType."""
input PrisCreateInputType {
  date: DateTime
  id: ID
  number: Float
  string: String
}

type PrisEntity {
  date: DateTime
  id: ID!
  number: Float
  string: String
}

"""Pris index Public InputType"""
input PrisIndexInputType {
  id: ID
}

"""Pris where Public InputType"""
input PrisWhereInputType {
  date: DateTime
  id: ID
  number: Float
  string: String
}

type Query {
  """find many mongo"""
  findManyMongo(paging: PagingInput, search: String, sortBy: String, where: MongoWhereInputType): ManyMongoEntity

  """find many neo with cursor-based pagination."""
  findManyNeo(paging: PagingInput, search: String, sortBy: String, where: NeoWhereInputType): ManyNeo

  """find many app with offset-based pagination."""
  findManyNeoWithPage(paging: PagingInput, search: String, sortBy: String, where: NeoWhereInputType): ManyNeo

  """find many pris"""
  findManyPris(paging: PagingInput, search: String, sortBy: String, where: PrisWhereInputType): ManyPrisEntity

  """find one mongo"""
  findOneMongo(index: MongoIndexInputType!, label: String): MongoEntity

  """find one neo"""
  findOneNeo(index: NeoIndexInputType!, label: String): NeoEntity

  """find one pris"""
  findOnePris(index: PrisIndexInputType!, label: String): PrisEntity
}

scalar link__Import